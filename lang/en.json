{
	"Rideable" : {
		"Titles" : {
			"Rideable"					: "Rideable",
			"WorldSettings"				: "World settings (GM only)",
			"ClientSettings"			: "Client settings",
			"GMonly"					: "GM only",
			"Tile"						: "Tile",
			"RequiresRL"				: "Rideable requires <a href=\"https://foundryvtt.com/packages/routinglib\">routinglib</a> to be active for the token following feature to work" 
		},
		
		"Settings" : {
			"defaultRideable" : {
				"name" 					: "Tokens rideable by default",
				"descrp"				: "Whether all tokens should be rideable by default (can be changed for each token in the token settings)"
			},
			
			"allowTileRiding" : {
				"name" 					: "Tiles can be mounted",
				"descrp"				: "Whether tiles can be mounted, just like tokens"
			},
			
			"allowMountingonEntering" : {
				"name" 					: "Allow mount on enter",
				"descrp"				: "Allow tokens and tiles so be set up to be mounted by tokens that enter their space"
			},
			
			"LocknKeyintegration" : {
				"name" 					: "Lock & Key integration",
				"descrp"				: "Allows rideable tokens to be locked"
			},
			
			"DFredsEffectsIntegration" : {
				"name" 					: "DFreds Convenient Effects integration",
				"descrp"				: "Allows certain effects to be applied to mounted and grappled tokens"
			},
			
			"CPREffectsIntegration" : {
				"name" 					: "Chris's Premades integration",
				"descrp"				: "Allows certain effects to be applied to mounted and grappled tokens"
			},
			
			"TaggerMountingIntegration" : {
				"name" 					: "Tagger mounting integration",
				"descrp"				: "Allows tokens to be mounted and unmounted via tags (tag: \"Rideable:{RiderTokenID}\")"
			},
			
			"CheckRiderCollision" : {
				"name" 					: "Check rider collision",
				"descrp"				: "Check rider collisions and change position accordingly"
			},
			
			"RidingHeight" : {
				"name" 					: "Riding height",
				"descrp"				: "The z-height which a riding token has compared to its mount (recommended to be above 0)"
			},
			
			"useRidingHeight" : {
				"name" 					: "Use riding height by default",
				"descrp"				: "If tokens use riding height by default"
			},
			
			"useRiddenTokenHeight" : {
				"name" 					: "Use token height",
				"descrp"				: "Uses a the riddens token height (added through the \"Wall-Height\" module) instead of the set \"Riding height\""
			},
			
			"MountingDistance" : {
				"name" 					: "Mounting distance",
				"descrp"				: "The maximum distance a token can have to its mounting target (-1 for an unlimited range)"
			},
			
			"UseArmReachDistance": {
				"name" 					: "Use \"Arms Reach\" distance",
				"descrp"				: "Uses the distance set in the \"Arms Reach\" for the mounting distance"	
			},
			
			"BorderDistance" : {
				"name" 					: "Border to border distance",
				"descrp"				: "If the mounting distance should be calculated from the tokens border instead of the middle point (only works correctly for circular/square tokens)"
			},

			"MaxRiders" : {
				"name" 					: "Maximum riders per token",
				"descrp"				: "The maximum amount of tokens, a token can be ridden by (-1 for unlimited)"
			},

			"RiderMovementworlddefault" : {
				"name" 					: "Rider movement default setting",
				"descrp"				: "Default setting for the Rider movement of the players (does not override)"
			},		

			"MountButtonDefaultPosition" : {
				"name" 					: "Mount button default position",
				"descrp"				: "Default setting for the position of the mount button (does not override)"
			},					

			"RiderMovement" : {
				"name" 					: "Rider movement",
				"descrp"				: "What should happen if a riding token tries to move on its own",
				"options" : {
					"worlddefault"		: "use world default setting",
					"disallow"			: "Prevent movement",
					"dismount"			: "Unmount rider",
					"moveridden"		: "Move ridden Token (if owned)"
				}
			},
			
			"MountButtonPosition" : {
				"name" 					: "Mount button position",
				"descrp"				: "Position of the mount button",
				"options" : {
					"default"			: "use world default setting",
					"none"				: "no button",
					"left"				: "left",
					"right"				: "right"
				}
			},
			
			"RiderProxySelect" : {
				"name"					: "Rider proxy select",
				"descrp"				: "If the ridden token or the riders should be selected instead of the selected token",
				"options" : {
					"never"				: "never",
					"familiar"			: "familiars only",
					"always"			: "always",
					"allRiders"			: "all riders",
					"ctrl"				: "on CTRL"
				}
			},
			
			"RiderRotation" : {
				"name" 					: "Link rotations",
				"descrp"				: "Rotates alls riders if a ridden token is rotated (also works with \"Move ridden Token\" option)"				
			},
			
			"TeleportRiders" : {
				"name" 					: "Teleport riders",
				"descrp"				: "If riding tokens should be teleported instead of moved when the mounted token moves",
				"options" : {
					"off" 				: "off",
					"familiaronly"		: "familiars only",
					"all"				: "all riders"
				}
			},
		
			"RidingSystemEffects" : {
				"name" 					: "Apply \"Mounted\" effect",
				"descrp"				: "If a token starts riding, a system dependent effect will be applied to the token"				
			},
			
			"CustomRidingEffects" : {
				"name" 					: "Custom riding effects",
				"descrp"				: "Effect that are applied to tokens when they start riding (Names or IDs, seperated with \";\")"				
			},			
			
			"RideableTag" : {
				"name" 					: "\"Rideable\" trait",
				"descrp"				: "Allows tokens which have the 'Rideable' trait to be ridden (the \"Rideable\" trait has to be manually added under settings>Pathfinder 2nd Edition>Manage Honebrew Elements>Creature Traits)"				
			},
			
			"FamiliarRiding" : {
				"name" 					: "Familiar riding",
				"descrp"				: "Allows for familiars to ride their master, the familairs will be placed at the corners of their master"				
			},
			
			"FamiliarRidingFirstCorner" : {
				"name" 					: "Familiar riding position",
				"descrp"				: "First corner occupied by familiars.",
				"options" : {
					"tl"				: "Top left",
					"tr"				: "Top right",
					"bl"				: "Bottom left",
					"br"				: "Bottom right"
				}
			},
			
			"Grappling" : {
				"name" 					: "Grappling",
				"descrp"				: "Allows tokens to grapple one another (grappled tokens can only be unmounted by the grappling token)"				
			},
			
			"GrapplingSystemEffects" : {
				"name" 					: "Apply \"Grappled\" effect",
				"descrp"				: "If a token gets grappled, a system dependent effect will be applied to the token"				
			},
			
			"CustomGrapplingEffects" : {
				"name" 					: "Custom grappling effects",
				"descrp"				: "Effect that are applied to tokens when they are grappled (Names or IDs, seperated with \";\")"				
			},
			
			"StopGrappleonEffectRemoval" : {
				"name"					: "Stop grapple on effect removal",
				"descrp"				: "If a token should be released as soon as the grapple effect is removed"
			},
			
			"GrappleplacementDefault" : {
				"name"					: "Grapple placement default",
				"descrp"				: "The standard grapple placement of tokens",
				"options" : {
					"RowBelow"			: "below",
					"RowAbove"			: "above",
					"RowMiddle"			: "middle",
					"ClosestInside"		: "inside",
					"Following"			: "follow"
				}
			},
			
			"PreventEnemyRiding" : {
				"name" 					: "Prevent enemy riding",
				"descrp"				: "Stops tokens from riding enemy tokens (GMs can still override this)"				
			},
			
			"FitRidersize" : {
				"name" 					: "Adjust rider size",
				"descrp"				: "Adjusts the size of the rider in the case that it is greater or equal to the size of the ridden token"				
			},
			
			"FitRiderSizeFactor" : {
				"name" 					: "Adjusted rider size factor",
				"descrp"				: "The factor by which the sizre of riders is adjusted in cases where they are greater or equal in size to the ridden token"				
			},
			
			"RiderScaleFactor" : {
				"name" 					: "Rider scale factor",
				"descrp"				: "Scale applied to riders (only graphical)"	
			},
			
			"MountingWeight" : {
				"name" 					: "Mounting weight",
				"descrp"				: "Adds an Item to Mounts to represent the weight of mounted Tokens",
				"options" : {
					"off"				: "Off",
					"mountsonly"		: "Normal mounts only",
					"all"				: "All mounts (including familiar riding)"
				}
			},
			
			"InitiativeLink" : {
				"name" 					: "Initiative link",
				"descrp"				: "Always places mounts after the rider in the initiative tracker",
				"options" : {
					"off"				: "Off",
					"mountsonly"		: "Normal mounts only",
					"all"				: "All mounts (reversed for familiar riding)"
				}
			},
			
			"SpeedAdjustment" : {
				"name" 					: "Speed adjustment",
				"descrp"				: "Adjusts the movement speed of riders to the speed of the mount (only active with mounting effects)",
				"options" : {
					"off"				: "Off",
					"mountsonly"		: "Normal mounts only",
					"all"				: "All mounts"
				}
			},
		
			"MessagePopUps" : {
				"name" 					: "Message popups",
				"descrp"				: "Enables multible popups upon actions such as mounting or dismounting"				
			},		
			
			"OnlyownedMessagePopUps" : {
				"name" 					: "Own message popups only",
				"descrp"				: "Only shows the message popups from tokens you control"				
			},
			
			"EnableFollowing" : {
				"name"					: "Enable Token following",
				"descrp"				: "If Token following is active in this world"
			},
			
			"FollowingCompatibilityMode" : {
				"name"					: "Token following compatibility mode",
				"descrp"				: "This mode can prevent or reduce bugs when using modules like \"Drag Ruler\" (changes order of the following logic)"
			},
			
			"FollowingAlgorithm" : {
				"name"					: "Following algorithm",
				"descrp"				: "Which following algorithm is used (install routinglib for more options)",
				"options" : {
					"SimplePathHistory" : "Simple path history (simple, resource light)",
					"routinglib"		: "routinglib (advanced, resource heavy, recommended)"
				}
			},
			
			"FollowingCombatBehaviour" : {
				"name"					: "In combat follow behaviour",
				"descrp"				: "How following tokens behave in combat",
				"options" : {
					"stop"				: "Stop following",
					"stop-includefollowed"	: "Stop following (consider followed)",
					"resumeafter"		: "Stop and resume after fight",
					"resumeafter-includefollowed" : "Stop and resume after fight (consider followed)",
					"continue"			: "Continue following"
				}
			},
			
			"OnlyfollowViewed" : {
				"name"					: "Only follow visible",
				"descrp"				: "If only currently visible tokens should be followed"
			},	
			
			"PreventFollowerStacking" : {
				"name"					: "Prevent Follower stacking",
				"descrp"				: "If followers of the same token should be prevented from stacking, they might still stack in tight areas"
			},	
			
			"OnFollowerMovement" : {
				"name" 					: "Follower movement",
				"descrp"				: "What should happen if a following token tries to move on its own",
				"options" : {
					"stopfollowing"		: "Stop following",
					"updatedistance"	: "Update following distance"
				}
			}			
		},
		
		"Keys" : {
			"Mount" : {
				"name" 					: "Mount",
				"descrp"				: "Mount controlled Tokens to targeted Token (alternative Macro: \"Mount\")"
			},
			
			"UnMount" : {
				"name" 					: "Unmount",
				"descrp"				: "Unmount controlled Tokens from their ridden Token, or unmount targeted Token from controlled Token (alternative Macro: \"Unmount\")"
			},
			
			"MountFamiliar" : {
				"name" 					: "Mount familiar",
				"descrp"				: "Mount controlled familiars to targeted Token if targeted Token is master(alternative Macro: \"MountFamiliar\") (only if setting \"Familiar riding\" is activated)"
			},
			
			"GrappleTarget" : {
				"name" 					: "Grapple/release target",
				"descrp"				: "Mount targeted token to controlled Token, can only be unmounted by grappling token(alternative Macro: \"Grapple\") (only if setting \"Grappling\" is activated)"
			},
			
			"ToggleMount" : {
				"name" 					: "Toggle mount",
				"descrp"				: "Mount or dismount controlled Tokens to/from targeted Token"
			},
			
			"ToggleGrapplePlacement" : {
				"name"					: "Switch Grapple placement",
				"descrp"				: "Switches between the placements options of grapple tokens for the selected tokens"
			},
			
			"TogglePiloting" : {
				"name" 					: "Toggle piloting",
				"descrp"				: "Start of stop piloting the currently mounted token"
			},

			"ToggleFollowing" : {
				"name"					: "Toggle following",
				"descrp"				: "Start of stop the selected tokens from following the targeted or followed token"
			},

			"ProxyTarget" : {
				"name"					: "Proxy target",
				"descrp"				: "Target the mount of the hovered token, if possible"
			}				
		},
		
		"Popup" : {
			"Mounting"					: "Mounted {pRiddenName}",
			"UnMounting"				: "Dismounted {pRiddenName}",
			"MountingFamiliar"			: "Following master {pRiddenName}",
			"UnMountingFamiliar"		: "Stopped following master {pRiddenName}",
			"PreventedRiderMove"		: "Still riding {pRiddenName}",
			"RidingLoop"				: "Riding {pRiddenName} would be awkward",
			"NoPlace"					: "{pRiddenName} has no place left",
			"EnemyRiding"				: "{pRiddenName} is my enemy",
			"Toofaraway"				: "{pRiddenName} is too far away",
			"RiddenisLocked"			: "{pRiddenName} is locked",
			
			"Grappling"					: "Grappled by {pRiddenName}",
			"UnGrappling"				: "Released from {pRiddenName}",
			"PreventedGrappledMove"		: "Still grappled by {pRiddenName}",
			
			"cantPilot"					: "{pRiddenName} can't be piloted",
			"startPiloting"				: "Now piloting {pRiddenName}",
			"stopPiloting"				: "No longer piloting {pRiddenName}",
			"cantbeMoved"				: "{cantbeMoved} cant be moved (may be attached to something)",
			
			"StopFollowing"				: "Stopped following",
			"StartFollowing"			: "Started following {pFollowedName}",
			"CantFollowinCombat"		: "Can't follow during combat",
			"TargetisFollowingMe"		: "{pFollowedName} is already following me",
			
			"PositionLocked"			: "Position locked",
			"PositionUnlocked"			: "Position unlocked"
		},	
		
		"TokenSettings" : {
			"MaxRiderFlag" : {
				"name"					: "Maximum riders",
				"descrp"				: "Overrides the global setting for this token (-1 for unlimited, leave empty to return to default world setting)"
			},
			
			"MountonEnterFlag" : {
				"name"					: "Mount on enter",
				"descrp"				: "Tokens that enter this tokens/tiles space mount it"
			},
			
			"AutoMountBlackListFlag" : {
				"name"					: "Mount on enter blacklist",
				"descrp"				: "Token names, IDs and actor IDs which will not be mounted on enter (seperated with \";\")"
			},
			
			"AutoMountWhiteListFlag" : {
				"name"					: "Mount on enter whitelist",
				"descrp"				: "Token names, IDs and actor IDs which are allowed to be mounted on enter (seperated with \";\", empty to ignore)"
			},
			
			"RiderPositioningFlag" : {
				"name"					: "Rider positioning",
				"descrp"				: "The pattern in which the rider tokens will be placed",
				"options" : {
					"CirclePlacement"	: "Circle",
					"RowPlacement"		: "Row",
					"BlockPlacement"	: "Block",
					"ClusterPlacement"	: "Cluster",
					"RowPlacementTop"	: "Row top",
					"RowPlacementBottom": "Row bottom",
					"CornerPlacement"	: "Corners",
					"CornerPlacementinner": "Corners (inner)",
					"MountPosition"		: "Mounting position"
				}
			},
			
			"RiderOffsetFlag" : {
				"name"					: "Riders offset",
				"descrp"				: "The placement offset for Riders [in scene squares]"
			},
			
			"RiderRotOffsetFlag" : {
				"name"					: "Riders rotational offset",
				"descrp"				: "The rotational offset for Riders"
			},
			
			"GrapplePlacementFlag" : {
				"name"					: "Grappled placement",
				"descrp"				: "Where grappled tokens are placed",
				"options" : {
					"RowBelow"			: "below",
					"RowAbove"			: "above",
					"RowMiddle"			: "middle",
					"ClosestInside"		: "inside",
					"Following"			: "follow"
				}
			},
			
			"issetRideableFlag" : {
				"name"					: "Token is Rideable",
				"descrp"				: "Overrides the global default setting"
			},
			
			"TileRideableNameFlag" : {
				"name"					: "Tile name",
				"descrp"				: "Name used by Rideable for this tile (e.g. Popups)"
			},
			
			"TokenFormFlag" : {
				"name"					: "Token form",
				"descrp"				: "",
				"options" : {
					"TokenFormCircle"	: "Circle/Ellipse",
					"TokenFormRectangle": "Rectangle",
					"TokenTransparency"	: "from transparency",
					"TokenFormAttachedTiles" : "from attached tokens/tiles",
					"TileFormNone"		: "No form/ignore"
				}
			},
			
			"CustomRidingheightFlag" : {
				"name"					: "Custom riding height",
				"descrp"				: "Custom height of this token, used for its riders (leave empty for default value)"
			},
			
			"UseRidingHeightFlag" : {
				"name"					: "Use riding height",
				"descrp"				: "If the elevation of this tokens riders should be managed"
			},
			
			"RidersScaleFlag" : {
				"name"					: "Riders scale",
				"descrp"				: "Scale applied to riders of this object (only graphical)"
			},
			
			"InsideMovementFlag" : {
				"name"					: "Riders can move freely",
				"descrp"				: "If riders can move freely within the boundaries of this token"
			},
			
			"SpawnRidersFlag" : {
				"name"					: "Spawn riders",
				"descrp"				: "Riders this token spawns with (Names or IDs, seperated with \";\")"
			},
			
			"MountingEffectsFlag" : {
				"name"					: "Riding effects",
				"descrp"				: "Effects that are applied to riders of this token (Names or IDs, seperated with \";\")"
			},
			
			"WorldMEffectOverrideFlag" : {
				"name"					: "Override world effects",
				"descrp"				: "Overrides the world standard effects with the below set effects (instead of appending them)"
			},
			
			"SelfApplyEffectsFlag" : {
				"name"					: "Self apply riding effects",
				"descrp"				: "If this token should apply its own riding effects while riding"
			},
			
			"forMountEffectsFlag" : {
				"name"					: "Mount effects",
				"descrp"				: "Effects that are applied to mounts of this token (Names or IDs, seperated with \";\")"
			},
			
			"canbeGrappledFlag" : {
				"name"					: "Can be grappled",
				"descrp"				: "If this token can be grappled"
			},
			
			"GrapplingEffectsFlag" : {
				"name"					: "Grappling effects",
				"descrp"				: "Effects that are applied to graplle targets of this token (Names or IDs, seperated with \";\")"
			},
			
			"CanbePilotedFlag" : {
				"name"					: "Can be piloted",
				"descrp"				: "Players can pilot this token, allowing them to move it even if they don't own it"
			},
			
			"CheckPilotedCollisionFlag" : {
				"name"					: "Collision when piloted",
				"descrp"				: "If this tokens collision should be calculated while piloting (deactivate for TAs with attached walls)"
			},
			
			"PilotedbyDefaultFlag" : {
				"name"					: "Piloted by default",
				"descrp"				: "If everyone riding this token automatically pilots this token (not compatible with \"Riders can move freely\")"
			}
		},
		
		"RideableTag.str"				: "rideable",
		
		"Items" : {
			"MountItem" : {
				"name" 					: "Mounted weight",
				"descrp"				: "Weight added by mounted creatures:"
			}
		},
		
		"monks-active-tiles" : {
			"filters" : {
				"name"					: "Filter",
				
				"riders-of" : {
					"name"				: "Filter riders of mount",
					"descrp"			: "<span class=\"filter-style\">{pname}</span> <span class=\"entity-style\">{pEntities}</span> {pCondition} of <span class=\"entity-style\">{pMount}</span>",
					"settings" : {
						"mount" : {
							"name"		: "Mount"
						},
						
						"filterCondition" : {
							"name"		: "Riding state condition:",
							"options" : {
								"rider": "is rider",
								"notrider" : "is not rider"
							}	
						}
					}
				},
				
				"is-rider" : {
					"name"				: "Filter riders",
					"descrp"			: "<span class=\"filter-style\">{pname}</span> <span class=\"entity-style\">{pEntities}</span> {pCondition}",
					"settings" : {
						"filterCondition" : {
							"name"		: "Riding state condition:",
							"options" : {
								"rider": "is rider",
								"notrider" : "is not rider"
							}	
						}
					}					
				},
				
				"is-ridden" : {
					"name"				: "Filter ridden",
					"descrp"			: "<span class=\"filter-style\">{pname}</span> <span class=\"entity-style\">{pEntities}</span> {pCondition}",
					"settings" : {
						"filterCondition" : {
							"name"		: "Ridden state condition:",
							"options" : {
								"ridden": "is ridden",
								"notridden" : "is not ridden"
							}	
						}
					}					
				}
			},
			
			"actions" : {
				"mount-this-tile" : {
					"name"				: "Mount to this tile",
					"descrp"			: "<span class=\"logic-style\">{pname}</span> <span class=\"entity-style\">{pEntities}</span>"
				},
				
				"mount-target" : {
					"name"				: "Mount",
					"descrp"			: "<span class=\"logic-style\">{pname}</span> <span class=\"entity-style\">{pEntities}</span> to <span class=\"entity-style\">{pMount}</span>",
					"settings" : {
						"target" : {
							"name"		: "Mount"
						}
					}
				},
				
				"unmount" : {
					"name"				: "Unmount",
					"descrp"			: "<span class=\"logic-style\">{pname}</span> <span class=\"entity-style\">{pEntities}</span>"
				},
				
				"unmount-riders" : {
					"name"				: "Unmount riders",
					"descrp"			: "<span class=\"logic-style\">{pname}</span> of <span class=\"entity-style\">{pEntities}</span>"
				},
				
				"toggle-mount-target" : {
					"name"				: "Toggle mount",
					"descrp"			: "<span class=\"logic-style\">{pname}</span> <span class=\"entity-style\">{pEntities}</span> to <span class=\"entity-style\">{pMount}</span>",
					"settings" : {
						"target" : {
							"name"		: "Mount"
						}
					}
				}
			}
		}
	}
}